services:
  # MongoDB Database
  mongodb:
    image: mongo:7.0
    container_name: planejador-mongodb-dev
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: senha123
      MONGO_INITDB_DATABASE: planejador-financeiro
    ports:
      - "27017:27017"
    volumes:
      - mongodb_dev_data:/data/db
    networks:
      - planejador-network

  # Backend API - Development
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: base
    container_name: planejador-backend-dev
    restart: unless-stopped
    environment:
      - NODE_ENV=development
      - PORT=3001
      - MONGODB_URI=mongodb://admin:senha123@mongodb:27017/planejador-financeiro?authSource=admin
      - JWT_SECRET=your-super-secret-jwt-key-change-in-production-min-32-characters-for-security
      - FRONTEND_URL=http://localhost:5173
      - ALPHA_VANTAGE_API_KEY=${ALPHA_VANTAGE_API_KEY:-demo}
      - SMTP_HOST=${SMTP_HOST:-smtp.gmail.com}
      - SMTP_PORT=${SMTP_PORT:-587}
      - SMTP_USER=${SMTP_USER:-your-email@gmail.com}
      - SMTP_PASS=${SMTP_PASS:-your-app-password}
    ports:
      - "3001:3001"
    depends_on:
      - mongodb
    volumes:
      - ./backend:/app
      - /app/node_modules
    networks:
      - planejador-network
    command: bun run dev

  # Frontend React App - Development
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: development
    container_name: planejador-frontend-dev
    restart: unless-stopped
    environment:
      - VITE_API_URL=http://localhost:3001
      - VITE_APP_TITLE=Planejador Financeiro
    ports:
      - "5173:5173"
    depends_on:
      - backend
    volumes:
      - ./frontend:/app
      - /app/node_modules
    networks:
      - planejador-network

  # Redis para cache
  redis:
    image: redis:7-alpine
    container_name: planejador-redis-dev
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_dev_data:/data
    networks:
      - planejador-network
    command: redis-server --appendonly yes

volumes:
  mongodb_dev_data:
    driver: local
  redis_dev_data:
    driver: local

networks:
  planejador-network:
    driver: bridge